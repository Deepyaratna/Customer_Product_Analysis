<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="/Users/deepyaratna/Downloads/stores (1).db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="3228"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,9:maincustomers"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="customers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="98"/><column index="2" value="177"/><column index="3" value="99"/><column index="5" value="108"/><column index="6" value="163"/><column index="7" value="128"/><column index="8" value="102"/><column index="9" value="72"/><column index="10" value="67"/><column index="11" value="74"/><column index="12" value="145"/><column index="13" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">--To compute the low stock for each product using a correlated subquery
SELECT productCode,ROUND(SUM(quantityOrdered) * 1.0/ (SELECT quantityInStock
														FROM products p
														WHERE o.productCode = p.productCode), 2) AS low_stock
FROM orderdetails AS o
GROUP BY productCode
ORDER BY low_stock
LIMIT 10;

--to compute the product performance for each product
SELECT productCode, SUM(quantityOrdered * priceEach) as product_performance
   FROM orderdetails
  GROUP BY productCode
  ORDER BY product_performance DESC
LIMIT 10 ;

--Combine the previous queries using a Common Table Expression (CTE) to display priority products for restocking using the IN operator.
WITH
  lowstock_table AS (
    SELECT
      productCode,
      ROUND(SUM(quantityOrdered) * 1.0 / (SELECT quantityInStock FROM products p WHERE o.productCode = p.productCode), 2) AS low_stock
    FROM
      orderdetails AS o
    GROUP BY
      productCode
  ),
  productperformance_table AS (
    SELECT
      productCode,
      SUM(quantityOrdered * priceEach) AS product_performance
    FROM
      orderdetails
    GROUP BY
      productCode
  )
SELECT
  low_stock,
  product_performance
FROM
  lowstock_table AS l
JOIN
  productperformance_table AS p ON l.productCode = p.productCode
ORDER BY
  product_performance DESC
LIMIT 5;

--join the products, orders, and orderdetails tables to have customers and products information in the same place
SELECT o.customerNumber, SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) as profit
FROM orders o
JOIN orderdetails od
ON o.orderNumber = od.orderNumber
JOIN products p
ON od.productCode = p.productCode
GROUP BY o.customerNumber;

--find the top five VIP customers
WITH profit_table AS(
SELECT o.customerNumber, SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) as profit
FROM orders o
JOIN orderdetails od
ON o.orderNumber = od.orderNumber
JOIN products p
ON od.productCode = p.productCode
GROUP BY o.customerNumber)

SELECT c.contactLastName, c.contactFirstName, c.city, c.country, pt.profit
  FROM customers c
  JOIN profit_table as pt
  ON c.customerNumber = pt.customerNumber
  GROUP BY pt.customerNumber
  ORDER BY pt.profit DESC
  LIMIT 5;

  --find the top five least-engaged customers
  WITH profit_table AS(
SELECT o.customerNumber, SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) as profit
FROM orders o
JOIN orderdetails od
ON o.orderNumber = od.orderNumber
JOIN products p
ON od.productCode = p.productCode
GROUP BY o.customerNumber)

SELECT c.contactLastName, c.contactFirstName, c.city, c.country, pt.profit
  FROM customers c
  JOIN profit_table as pt
  ON c.customerNumber = pt.customerNumber
  GROUP BY pt.customerNumber
  ORDER BY pt.profit
  LIMIT 5;

  --compute the average of customer profits using the CTE on the previous screen
WITH profit_table AS(
SELECT o.customerNumber, SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) as profit
FROM orders o
JOIN orderdetails od
ON o.orderNumber = od.orderNumber
JOIN products p
ON od.productCode = p.productCode
GROUP BY o.customerNumber)

SELECT AVG(profit) as ltv
FROM profit_table;
</sql><current_tab id="0"/></tab_sql></sqlb_project>
